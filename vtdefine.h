#define MSR_IA32_VMX_BASIC              0x480		//VMCS_ID
#define MSR_IA32_FEATURE_CONTROL	0x3a	//MSR VT-x Enable Feilds

#define IA32_VMX_CR0_FIXED0  0x486	//CR Regester Fix Feilds
#define IA32_VMX_CR0_FIXED1  0x487
#define IA32_VMX_CR4_FIXED0  0x488
#define IA32_VMX_CR4_FIXED1  0x489

#define VM_INSTRUCTION_ERROR 0x00004400	

#define MSR_IA32_VMX_PINBASED_CTLS		0x481 //Pin Base Control
#define MSR_IA32_VMX_PROCBASED_CTLS		0x482 //
#define MSR_IA32_VMX_ENTRY_CTLS         0x484
#define MSR_IA32_VMX_EXIT_CTLS          0x483

#define LA_STANDARD		0x10

#define KGDT64_NULL      (0 * 16)       // NULL descriptor
#define KGDT64_R0_CODE   (1 * 16)       // kernel mode 64-bit code
#define KGDT64_R0_DATA   (1 * 16) + 8   // kernel mode 64-bit data (stack)
#define KGDT64_R3_CMCODE (2 * 16)       // user mode 32-bit code
#define KGDT64_R3_DATA   (2 * 16) + 8   // user mode 32-bit data
#define KGDT64_R3_CODE   (3 * 16)       // user mode 64-bit code
#define KGDT64_SYS_TSS   (4 * 16)       // kernel mode system task state
#define KGDT64_R3_CMTEB  (5 * 16)       // user mode 32-bit TEB
#define KGDT64_R0_CMCODE (6 * 16)       // kernel mode 32-bit code

#define	BP_GDT64_CODE		KGDT64_R0_CODE  // cs
#define BP_GDT64_DATA		KGDT64_R0_DATA  // ds, es, ss
#define BP_GDT64_SYS_TSS	KGDT64_SYS_TSS  // tr
#define BP_GDT64_PCR		KGDT64_R0_DATA  // gs


#define MSR_IA32_SYSENTER_CS            0x174
#define MSR_IA32_SYSENTER_ESP           0x175
#define MSR_IA32_SYSENTER_EIP           0x176
#define MSR_IA32_DEBUGCTL               0x1d9


#define MSR_EFER                        0xc0000080          /* extended feature register */
#define MSR_STAR                        0xc0000081          /* legacy mode SYSCALL target */
#define MSR_LSTAR                       0xc0000082          /* long mode SYSCALL target */
#define MSR_CSTAR                       0xc0000083          /* compatibility mode SYSCALL target */
#define MSR_SYSCALL_MASK                0xc0000084          /* EFLAGS mask for syscall */
#define MSR_FS_BASE                     0xc0000100          /* 64bit FS base */
#define MSR_GS_BASE                     0xc0000101          /* 64bit GS base */
#define MSR_SHADOW_GS_BASE              0xc0000102          /* SwapGS GS shadow */

#define VM_EXIT_SAVE_DEBUG_CONTROLS             0x00000004	//VM Exit Controls
#define VM_EXIT_IA32E_MODE                      0x00000200
#define VM_EXIT_ACK_INTR_ON_EXIT                0x00008000
#define VM_EXIT_SAVE_IA32_PAT                   0x00040000
#define VM_EXIT_LOAD_IA32_PAT                   0x00080000
#define VM_EXIT_SAVE_IA32_EFER                  0x00100000
#define VM_EXIT_LOAD_IA32_EFER                  0x00200000
#define VM_EXIT_SAVE_VMX_PREEMPTION_TIMER       0x00400000
#define VM_EXIT_CLEAR_BNDCFGS                   0x00800000

#define VM_ENTRY_LOAD_DEBUG_CONTROLS            0x00000004	//VM Entry Controls
#define VM_ENTRY_IA32E_MODE                     0x00000200
#define VM_ENTRY_SMM                            0x00000400
#define VM_ENTRY_DEACT_DUAL_MONITOR             0x00000800
#define VM_ENTRY_LOAD_IA32_PAT                  0x00004000
#define VM_ENTRY_LOAD_IA32_EFER                 0x00008000
#define VM_ENTRY_LOAD_BNDCFGS                   0x00010000

enum
{
	PIN_BASED_VM_EXEC_CONTROL = 0x00004000,
	CPU_BASED_VM_EXEC_CONTROL = 0x00004002,
	VM_ENTRY_CONTROLS = 0x00004012,
	VM_EXIT_CONTROLS = 0x0000400c,
	EXCEPTION_BITMAP = 0x00004004,
	VM_EXIT_MSR_STORE_COUNT = 0x0000400e,
	VM_EXIT_MSR_LOAD_COUNT = 0x00004010,
	VM_ENTRY_MSR_LOAD_COUNT = 0x00004014,
	VM_ENTRY_INTR_INFO_FIELD = 0x00004016,
	GUEST_ACTIVITY_STATE = 0X00004826,
	HOST_CR0 = 0x00006c00,
	HOST_CR3 = 0x00006c02,
	HOST_CR4 = 0x00006c04,
	HOST_ES_SELECTOR = 0x00000c00,
	HOST_CS_SELECTOR = 0x00000c02,
	HOST_SS_SELECTOR = 0x00000c04,
	HOST_DS_SELECTOR = 0x00000c06,
	HOST_FS_SELECTOR = 0x00000c08,
	HOST_GS_SELECTOR = 0x00000c0a,
	HOST_TR_SELECTOR = 0x00000c0c,
	HOST_FS_BASE = 0x00006c06,
	HOST_GS_BASE = 0x00006c08,
	HOST_TR_BASE = 0x00006c0a,
	HOST_GDTR_BASE = 0x00006c0c,
	HOST_IDTR_BASE = 0x00006c0e,
	HOST_IA32_SYSENTER_CS = 0x00004c00,
	HOST_IA32_SYSENTER_ESP = 0x00006c10,
	HOST_IA32_SYSENTER_EIP = 0x00006c12,
	HOST_RSP = 0x00006c14,
	HOST_RIP = 0x00006c16,
	VM_EXIT_REASON = 0x00004402,
	GUEST_CR0 = 0x00006800,
	GUEST_CR3 = 0x00006802,
	GUEST_CR4 = 0x00006804,
	GUEST_DR7 = 0x0000681a,
	GUEST_RFLAGS = 0x00006820,
	GUEST_ES_SELECTOR = 0x00000800,
	GUEST_CS_SELECTOR = 0x00000802,
	GUEST_SS_SELECTOR = 0x00000804,
	GUEST_DS_SELECTOR = 0x00000806,
	GUEST_FS_SELECTOR = 0x00000808,
	GUEST_GS_SELECTOR = 0x0000080a,
	GUEST_LDTR_SELECTOR = 0x0000080c,
	GUEST_TR_SELECTOR = 0x0000080e,
	GUEST_ES_AR_BYTES = 0x00004814,
	GUEST_CS_AR_BYTES = 0x00004816,
	GUEST_SS_AR_BYTES = 0x00004818,
	GUEST_DS_AR_BYTES = 0x0000481a,
	GUEST_FS_AR_BYTES = 0x0000481c,
	GUEST_GS_AR_BYTES = 0x0000481e,
	GUEST_LDTR_AR_BYTES = 0x00004820,
	GUEST_TR_AR_BYTES = 0x00004822,
	VMCS_LINK_POINTER = 0x00002800,
	VMCS_LINK_POINTER_HIGH = 0x00002801,
	GUEST_IA32_DEBUGCTL = 0x00002802,
	GUEST_IA32_DEBUGCTL_HIGH = 0x00002803,
	GUEST_SYSENTER_CS = 0x0000482A,
	GUEST_SYSENTER_ESP = 0x00006824,
	GUEST_SYSENTER_EIP = 0x00006826,
	GUEST_RSP = 0x0000681c,
	GUEST_RIP = 0x0000681e,
	GUEST_CS_BASE = 0x00006808,
	GUEST_ES_BASE = 0x00006806,
	GUEST_SS_BASE = 0x0000680a,
	GUEST_DS_BASE = 0x0000680c,
	GUEST_FS_BASE = 0x0000680e,
	GUEST_GS_BASE = 0x00006810,
	GUEST_LDTR_BASE = 0x00006812,
	GUEST_TR_BASE = 0x00006814,
	GUEST_GDTR_BASE = 0x00006816,
	GUEST_IDTR_BASE = 0x00006818,
	GUEST_GDTR_LIMIT = 0x00004810,
	GUEST_IDTR_LIMIT = 0x00004812,
	GUEST_CS_LIMIT = 0x00004802,
	GUEST_TR_LIMIT = 0x0000480e,
	GUEST_ES_LIMIT = 0x00004800,
};

enum SEGREGS
{
	ES = 0,
	CS,
	SS,
	DS,
	FS,
	GS,
	LDTR,
	TR
};